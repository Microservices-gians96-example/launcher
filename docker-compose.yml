version: '3'

services:
  nats-server:
    image: nats:latest
    ports:
      # - "4222:4222"
      - "8222:8222" ## Estos puertos estan expuestos fuera de la red del contenedor, para que los clientes puedan comunicarse con el servicio nats-server
  client-gateway:
    build: ./client-gateway
    ports:
      - ${CLIENT_GATEWAY_PORT}:3000
    volumes:
      - ./client-gateway/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=3000 ## Estos puertos estan expuestos fuera de la red del contenedor, para que los clientes puedan comunicarse con el servicio client-gateway
      - NATS_SERVERS=nats://nats-server:4222 ## Dentro del container se crea un DNS con el nombre nats-server, la cual apunta a la IP del host nats-server
  products-ms:
    build: ./products-ms
    volumes:
      - ./products-ms/src:/usr/src/app/src
      # - ./products-ms/prisma:/usr/src/app/prisma
    command: npm run start:dev
    environment:
      - PORT=3000
      - NATS_SERVERS=nats://nats-server:4222 ## Dentro del container se crea un DNS con el nombre nats-server, la cual apunta a la IP del host nats-server
      - DATABASE_URL=file:./dev.db
    # ports:
    #   - "3001:3001"
    
  # Orders MS
  orders-ms:
    depends_on:
      - orders-db
    build: ./orders-ms
    volumes:
      - ./orders-ms/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=3000
      - NATS_SERVERS=nats://nats-server:4222 ## Dentro del container se crea un DNS con el nombre nats-server, la cual apunta a la IP del host nats-server
      - DATABASE_URL=postgresql://postgres:123456@orders-db:5432/ordersdb?schema=public
  # ==================
  # Orders DB
  # ==================
  orders-db:
    container_name: orders_database
    image: postgres:16.2
    restart: always
    volumes:
      - ./orders-ms/postgres:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123456
      - POSTGRES_DB=ordersdb

  # ==================
  # Payments ms
  # ==================
  payments-ms:
    container_name: payments-ms
    build: ./payments-ms
    volumes:
      - ./payments-ms/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=${PAYMENTS_MS_PORT}
      - NATS_SERVERS=nats://nats-server:4222 ## Dentro del container se crea un DNS con el nombre nats-server, la cual apunta a la IP del host nats-server
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_SUCCESS_URL=${STRIPE_SUCCESS_URL}
      - STRIPE_CANCEL_URL=${STRIPE_CANCEL_URL}
      - STRIPE_ENDPOINT_SECRET=${STRIPE_ENDPOINT_SECRET}
    ports:
      - ${PAYMENTS_MS_PORT}:${PAYMENTS_MS_PORT}

  # ==================
  # Auth DB
  # ==================

  # auth-db:
  #   container_name: auth_database
  #   image: mongo:7.0
  #   restart: always
  #   volumes:
  #     - ./auth-ms/mongo:/var/lib/mongo/data
  #   ports:
  #     - 27017:27017
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=root
  #     - MONGO_INITDB_ROOT_PASSWORD=123456
  #     - MONGO_INITDB_DATABASE=authdb

  # ==================
  # Auth MS
  # ==================
  auth-ms:
    build: ./auth-ms
    volumes:
      - ./auth-ms/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=3000
      - NATS_SERVERS=nats://nats-server:4222 ## Dentro del container se crea un DNS con el nombre nats-server, la cual apunta a la IP del host nats-server
      - DATABASE_URL=${AUTH_DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
  
